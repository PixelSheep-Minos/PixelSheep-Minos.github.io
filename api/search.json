[{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-03-10T06:55:28.092Z","categories_index":"","tags_index":"","author_index":"PixelSheep"},{"id":"8d0f82d2dd6ae0fea43ade7db566e2d1","title":"基于Jump Flood Algorithm算法生成SDF图","content":"一、引言  之前项目需要写一个带浮沫效果的卡通水面的shader。对于foam通常的做法，也是网上烂大街的做法，即是通过采样深度图，与当前fragment的深度值的差值求出水面与物体边缘。但这样的效果其实并不好，因为当物体表面越垂直于水面时（比如一个立方体浮在水面上），由于深度差变化很快，采样的范围很小，做出来的foam效果不太好看。后来我改用SDF图的方法来生成foam区域，效果理想很多。本文介绍了SDF及用到的算法Jump Flood Algorithm。\n二、SDF  有向距离场（SDF, Signed Distance Fields），记录的是空间中某一点与某个集合边界的距离值，其正负值则对应该点在集合外部或内部。SDF在计算机图形学和相关领域中的用处非常广泛，它常用布料动画中的碰撞检测、多体动力学、网格生成、运动规划和雕刻等。\n一张2D SDF图则定义为：  一张标注了每个像素距离最近几何体边界的距离的位图\n\n如果像素在几何体内，值为负，距离越大则值越小\n如果像素在几何体边界，则值为0\n如果像素在几何体外，值为正，距离越大则值越大\n\n","slug":"My Test Blog","date":"2021-06-24T16:00:00.000Z","categories_index":"TechArt","tags_index":"TechArt","author_index":"PixelSheep"}]